---
import { getCollection, getEntryBySlug } from "astro:content";

// Generate all the valid routes (/projects/<slug>)
export async function getStaticPaths() {
  const items = await getCollection("projects");
  return items.map((entry) => ({
    params: { slug: entry.slug },
  }));
}

// Grab the slug from the URL params
const { slug } = Astro.params;

// Load the right entry
const entry = await getEntryBySlug("projects", slug!);
if (!entry) {
  throw new Error(`Project not found: ${slug}`);
}

// Frontmatter data + rendered markdown
const { data } = entry;
const rendered = await entry.render();
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>{data.title}</title>
    <link rel="stylesheet" href="/src/styles/global.css" />
    <meta name="description" content={data.summary} />
    <!-- OpenGraph for sharing -->
    <meta property="og:title" content={data.title} />
    <meta property="og:description" content={data.summary} />
    {data.hero && <meta property="og:image" content={data.hero} />}
  </head>
  <body class="mx-auto max-w-3xl p-6">
    <a href="/projects" class="underline">← All projects</a>

    <header class="mt-3">
      <h1 class="text-3xl font-bold">{data.title}</h1>
      <p class="opacity-80 mt-1">{data.summary}</p>
      {data.hero && (
        <img
          src={data.hero}
          alt={`${data.title} hero image`}
          class="mt-4 rounded-2xl"
        />
      )}
      <div class="mt-3 text-sm opacity-70">{data.tech.join(" • ")}</div>
      <div class="mt-3 flex gap-4">
        {data.repo && (
          <a class="underline" href={data.repo} target="_blank">Source</a>
        )}
        {data.demo && (
          <a class="underline" href={data.demo} target="_blank">Demo</a>
        )}
      </div>
    </header>

    <article class="prose prose-invert mt-8 max-w-none">
      <Fragment set:html={rendered.content} />
    </article>
  </body>
</html>
